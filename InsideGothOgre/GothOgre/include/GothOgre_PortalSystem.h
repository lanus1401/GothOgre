#ifndef GOTHOGRE_PORTAL_SYSTEM_H
#define GOTHOGRE_PORTAL_SYSTEM_H

#include "GothOgre_GraphicSettings.h"
#include "GothOgre_SceneManagerEx.h"


namespace GothOgre
{
	//---------------------------------------------------------------------------
	/** Portal - a small polygon which separates two neightbouring sectors. */
	class GOTHOGRE_EXPORT Portal : public MovableObject
	{
	public:
        /** Constructor */
		Portal();

		/** Named constructor */
		Portal(const String& _name);

		/** Virtual destructor */
		~Portal();

        /** Returns the type name of this object. */
        const String& getMovableType() const;
		
		/** Get the manager of this object. */
		SceneManagerEx* _getManager() const;

		/** Sets the material used by this portal. */
		void setMaterial(const MaterialPtr& _material);

		/** Returns a pointer to a material used by this portal. */
		MaterialPtr getMaterial() const {return mMaterial;}

		/** Returns the name of the first sector. */
		const String& getFirstSector() const {return mFirstSector;}

		/** Returns the name of the first sector. */
		const String& getSectorFrom() const {return getFirstSector();}

		/** Returns the name of the second sector. */
		const String& getSecondSector() const {return mSecondSector;}

		/** Returns the name of the second sector. */
		const String& getSectorTo() const {return getSecondSector();}

		/** Returns true if the name of the second sector is empty. */
		bool isToOutdoor() const {return getSecondSector().empty();}

		/** Returns true if the name of the first sector is empty. */
		bool isFromOutdoor() const {return getFirstSector().empty();}

		/** Returns true if the name of the second sector is empty. */
		bool isToIndoor() const {return !isToOutdoor();}

		/** Returns true if the name of the first sector is empty. */
		bool isFromIndoor() const {return !isFromOutdoor();}

		/** Sets the center of the portal's polygon, in the local space of the parent scene node. */
		void setCenter(const Vector3& _center);

		/** Returns the center of the portal's polygon, in the local space of the parent scene node. */
		const Vector3& getCenter() const {return mCenter;}

		/** Sets the normal to the portal's polygon, in the local space of the parent scene node. */
		void setNormal(const Vector3& _normal);

		/** Returns the normal to the portal's polygon, in the local space of the parent scene node. */
		const Vector3& getNormal() const {return mNormal;}

		/** Sets the area of the portal's polygon. */
		void setArea(const Real _area);

		/** Returns the area of the portal's polygon. */
		Real getArea() const {return mArea;}

		/** Sets the coordinates of vertices (in the local space). */
		void setVertices(const vector<Vector3>::type& _localVertices);

		/** Returns the coordinates of vertices (in the local space). */
		const vector<Vector3>::type& getVertices() const {return mVertices;}

		/** Calculates the center of the portal in the world space. */
		const Vector3& _getDerivedCenter() const;

		/** Calculates the normal to the portal in the world space. */
		const Vector3& _getDerivedNormal() const;

	protected:
		// Method called to notify the object that it has been moved.
		void _notifyMoved();

		// Method called to notify the object that it has been attached to a node. 
		void _notifyAttached(Node* _parent, bool _isTagPoint = false);

		// Skies are not rendered in the normal way, so we return 0
		Real getBoundingRadius() const {return 0;}
		const AxisAlignedBox& getBoundingBox() const {return AxisAlignedBox::BOX_NULL;}
		bool isVisible() const {return false;}
		void _updateRenderQueue(RenderQueue* _queue) {}
		void visitRenderables(Renderable::Visitor* _visitor, bool _debugRenderables = false) {}

	private:
		// Internal initialisation
		void init();

		// Internal update
		void updateDerived();

	private:
		friend class PortalSystem;
		String                mFirstSector;
		String                mSecondSector;
		Vector3               mCenter;
		Vector3               mNormal;
		Real                  mArea;
		MaterialPtr           mMaterial;
		vector<Vector3>::type mVertices;
		Vector3               mDerivedCenter;
		Vector3               mDerivedNormal;
		bool                  mNeedUpdateDerived;
	};



	//---------------------------------------------------------------------------
	/** A singleton to manage portals. */
	class GOTHOGRE_EXPORT PortalSystem : public Singleton<PortalSystem>, 
		public MovableObjectFactory
	{
	public:
		PortalSystem();
		~PortalSystem();

		void initialise();
		void shutdown();

		/** Get the type of the object to be created. */
		const String& getType() const;
		static const String FACTORY_TYPE_NAME;

		/** Creates a portal - with an autogenerated name. */
		Portal* createPortal(SceneManagerEx* _sm);

		/** Destroys a portal. */
		void destroyPortal(Portal* _portal);

		typedef vector<Portal*>::type PortalList;
		typedef ConstVectorIterator<PortalList> PortalIterator;

		/** Searchs information about portal polygons in a level mesh
		and create the movable objects of the "Portal" type. */
		PortalList createPortalsByLevelEntity(Entity* _entity);

		/** Destroys all portals in a specified list, clears the list. */
		void destroyPortals(PortalList& _portalList);

		/** Returns list of portals which are neightbour for a specified sector. 
		If the specified sector is an empty string 
		then the function returns a list of all outdoor-to-indoor portals. */
		PortalIterator getAdjacentPortalIterator(const String& _sector, SceneManagerEx* _sm) const;

		/** Sets the transparency of totally all the portals, in range [0..1]. 
		0.0 is completely transparent and 1.0 is fully opaque. */
		void setAlpha(Real _alpha);

		/** Returns the transparency set for all the portals. */
		Real getAlpha() const;

	private:
		MovableObject* createInstanceImpl(const String& _name, const NameValuePairList* _params);
		void destroyInstance(MovableObject* _obj);

		GOTHOGRE_DECLARE_GRAPHIC_SETTINGS_CHANGED(PortalSystem);
		void updateMaterialAlpha(const MaterialPtr& _material, SceneManagerEx* _sm);

	private:
		friend class Portal;
		void _notifyPortalDestroyed(Portal* _portal);
		void _notifySectorsChanged(Portal* _portal, const String& _oldFirstSector, const String& _oldSecondSector);
		void _notifyMaterialChanged(Portal* _portal, const MaterialPtr& _oldMaterial);

	private:
		typedef map<String, PortalList>::type  AdjacentPortals;
		
		struct ScenePortals
		{
			AdjacentPortals  adjacentPortals;
		};
		
		typedef map<SceneManagerEx*, ScenePortals>::type  ScenePortalsBySM;
		
	private:
		ScenePortalsBySM  mScenePortalsBySM;
		Real              mAlpha;
	};

} // namespace GothOgre

#endif // GOTHOGRE_PORTAL_SYSTEM_H